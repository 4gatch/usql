/* 
This example illustrates processing a Json file containing nested nodes using the Json extractors and UDFs from Microsoft.Analytics.Samples.Formats.Json libraries.
Download the Json extractors and UDFs from https://github.com/Azure/usql/tree/master/Examples/DataFormats

JSON file used in this example
{
	"_comment": "Source - http://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html",
	"id": "0001",
	"type": "donut",
	"name": "Cake",
	"ppu": 0.55,
	"batters":
		{
			"batter":
				[
					{ "id": "1001", "type": "Regular" },
					{ "id": "1002", "type": "Chocolate" },
					{ "id": "1003", "type": "Blueberry" },
					{ "id": "1004", "type": "Devil's Food" }
				]
		},
	"topping":
		[
			{ "id": "5001", "type": "None" },
			{ "id": "5002", "type": "Glazed" },
			{ "id": "5005", "type": "Sugar" },
			{ "id": "5007", "type": "Powdered Sugar" },
			{ "id": "5006", "type": "Chocolate with Sprinkles" },
			{ "id": "5003", "type": "Chocolate" },
			{ "id": "5004", "type": "Maple" }
		]
}

The U-SQL code parses the Json and generates a list of all possible combinations for donuts - with the possible batter and topping used in the donut.
*/

CREATE ASSEMBLY IF NOT EXISTS [Newtonsoft.Json] FROM "assemblies/Newtonsoft.Json.dll";
CREATE ASSEMBLY IF NOT EXISTS [Microsoft.Analytics.Samples.Formats] FROM "assemblies/Microsoft.Analytics.Samples.Formats.dll";

REFERENCE ASSEMBLY [Newtonsoft.Json];
REFERENCE ASSEMBLY [Microsoft.Analytics.Samples.Formats];

DECLARE @INPUT_FILE string = @"/Samples/Data/json/donut.json";


//Extract the different properties from the Json file using a JsonExtractor
@json =
    EXTRACT id string, type string, name string, ppu string, batters string, topping string
    FROM @INPUT_FILE
    USING new Microsoft.Analytics.Samples.Formats.Json.JsonExtractor();


/*
Batters and Toppings have nested Json in them, this script extracts the nested Json as SQL.MAPs and then gets their values in a SQL.ARRAY
*/
@parsebatterandtopping =
    SELECT id,
           type ,
           name ,
           ppu ,
           Microsoft.Analytics.Samples.Formats.Json.JsonFunctions.JsonTuple(batters, "batter[*]").Values AS batter_arr,
           Microsoft.Analytics.Samples.Formats.Json.JsonFunctions.JsonTuple(topping).Values AS topping_arr
    FROM @json;

/*
Use CROSS APPLY to generate a cartesian product of the various batters and toppings
*/
@cake_types =
    SELECT id,
           type,
           name,
           ppu,
           Microsoft.Analytics.Samples.Formats.Json.JsonFunctions.JsonTuple(b_value) ["type"]AS batter,
           Microsoft.Analytics.Samples.Formats.Json.JsonFunctions.JsonTuple(t_value) ["type"]AS topping
    FROM @parsebatterandtopping
         CROSS APPLY
             EXPLODE(batter_arr) AS t(b_value)
         CROSS APPLY
             EXPLODE(topping_arr) AS T(t_value);

OUTPUT @cake_types
TO "/Samples/Output/caketypes.csv"
USING Outputters.Csv(quoting : false);