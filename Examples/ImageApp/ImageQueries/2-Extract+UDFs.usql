// Shows how to extract images (up to approx 4MB) into a rowset using a custom extractor 
// and uses some user-defined functions to extract the image properties and to create a thumbnail
//
// Note that this shows some limits if you break things up too much:
// 1. @image_data row generated by the extractor can be at most 4MB in size.
// 2. doing too many UDF calls in the same select can increase memory pressure since they invoke several times on the same data.

REFERENCE ASSEMBLY Images;

USING Images;

@image_data =
    EXTRACT image_data byte[]  // Max size of row is 4MB!
          , name string
          , format string
    FROM @"/Samples/Data/Images/{name}.{format}"
    USING new ImageExtractor();

// Use UDOs
@image_properties =
    SELECT Images.ImageOps.getImageProperty(image_data, ImageProperties.copyright) AS image_copyright,
		   Images.ImageOps.getImageProperty(image_data, ImageProperties.equipment_make) AS image_equipment_make,
		   Images.ImageOps.getImageProperty(image_data, ImageProperties.equipment_model) AS image_equipment_model,
		   Images.ImageOps.getImageProperty(image_data, ImageProperties.description) AS image_description
    FROM @image_data
    WHERE format IN ("JPEG", "jpeg", "jpg", "JPG");

OUTPUT @image_properties
TO @"/output/images/imageproperties.csv"
USING Outputters.Csv();

// Now generate and output a scaled thubnail image
@image_data =
    SELECT image_data
    FROM @image_data
    WHERE name == "GT4" AND format == "jpg";

@scaled_image =
    SELECT ImageOps.scaleImageTo(image_data, 150, 150) AS thumbnail_image
    FROM @image_data;

OUTPUT @scaled_image
TO "/output/images/GT4_thumbnail.jpg"
USING new Images.ImageOutputter();



