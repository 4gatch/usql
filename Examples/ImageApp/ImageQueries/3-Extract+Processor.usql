// Shows how to extract images (up to approx 4MB) into a rowset using a custom extractor 
// and use a user-defined processor to extract the image properties and to create a thumbnail. 
// We show the use of READONLY and REQUIRED to allow the query optimizer to push predicates and column elimination through the processor.
// The processor may be producing less memory pressure.
// 
// Note that this still shows some limits if you break things up too much:
// 1. @image_data row generated by the extractor can be at most 4MB in size.

REFERENCE ASSEMBLY Images;

@image_data =
    EXTRACT image_data byte[], name string, format string
    FROM @"/Samples/Data/Images/{name}.{format}"
    USING new Images.ImageExtractor();

//@image_data = SELECT image_data, name FROM @image_data WHERE format IN ("JPEG", "jpeg", "jpg", "JPG");

@image_properties =
    PROCESS @image_data
    PRODUCE name string,
            copyright string,
            equipment_make string,
            equipment_model string,
            description string,
            thumbnail byte[]
            READONLY name
            REQUIRED image_data(copyright, equipment_make, equipment_model, description, thumbnail)
    USING new Images.ImageProcessor();

// Uncomment to show column pruning
// @image_properties = SELECT name FROM @image_properties;

OUTPUT @image_properties
TO @"/output/images/imageproperties.csv"
USING Outputters.Csv();




